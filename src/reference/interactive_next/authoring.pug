extends ./page.pug

block title
    | Authoring Bundles | Interactive Reference | Mixer Developers

block reference
    h1 Authoring Bundles

    p We try to provide the best experience for creating awesome Interactive integrations from inception to massive popularity. This can be broken down into a couple phases:

    ol
        li #[a(href='#local-development') Local development], iterating on custom Interactive bundles on your own computer;
        li #[a(href='#initial-e2e') Initial end-to-end testing], connecting to your controls from your local computer with a game client connected to the Mixer server;
        li #[a(href='#final-testing') Final testing and publishing], running your controls in production and publishing them.

    h2#local-development Local Development

    p You can start the local web server by running #[code npm start] in your Interactive bundle. For more details on this initial setup, check out the #[a(href='/reference/interactive_next/index.html#quickstart') quickstart guide].

    pre: code npm start

    p This will start the development server and open your web browser. On the left-hand side of the page, you'll see a control schema, which controls the display and positioning of controls.

    // todo(connor4312): add a screenshot

    p This is the state "tree" that's created when placing controls in the Interactive Studio, and is what is modified when your game client calls protocol methods like #[code createScene], #[code updateControl], #[code deleteControl], and so on. There are several other tabs which let you edit what the controls "see" as the currently connected participant, and the groups.

    p You can edit this state tree and see your controls update in real time, and as you edit the local source files the server will automatically recompile and update your controls. We recommend keeping your browser's Developer Tools open while developing to allow you view errors and debug source code. #[a(href='https://developer.chrome.com/devtools') Here] is great introduction to using the Developer Tools in Chrome.

    p There are also controls on the editor to allow you to simulate how your controls look on different displays, reload the control frame, enter full screen mode, connect to production, and more. Look around!

    h2#initial-e2e Initial End-To-End

    p You've got some controls built and ready to test out, fantastic! Let's run the upload command to bundle and save the files to Mixer:

    pre: code miix upload

    p This will save your controls as a private bundle on Mixer. Only you will be able to see it and assign it to Interactive versions. Go ahead and create a version on the  #[a(href='https://mixer.com/i/studio' target='_blank') Interactive Studio], and set up your game client to connect using that version. If you need help creating a game client, check out our reference #[a(href='/reference/interactive/index.html#getting-started') here].

    p Once your controls are uploaded, go ahead and connect your game client to your Mixer channel. You'll now see the controls active when you visit your channel on Mixer. You #[em could] bundle and re-upload your controls whenever you want to test out changes, but there's a better way!

    p Head back to your local development server, and hit the rocket button in the upper right-hand corner. After a moment or two, your local set of Interactive controls will now be connected to your channel! You can continue making changes to your local files; the controls will automatically reload and reconnect to your game client when you do. This lets you test your bundle end-to-end, with an iteration time of under a second!

    h2#final-testing Final Testing &amp; Publishing

    p If you've been testing your controls using the local development server, go ahead and run one last #[code miix upload] and try out your controls on the Mixer website. Once you publish a version of your control bundle, you won't be able to modify it!

    p Now is also a good time to make sure your integration has a good name and description (in your #[code package.json] file) as well as a helpful, descriptive #[code readme.md] file. If you want a preview of what the rendered readme will look like or are after a GUI for writing it, we recommend #[a(href='https://stackedit.io/editor') StackEdit].

    p If everything looks good, you're ready to publish, and that's one command away!

    pre: code miix publish

    p This will publish your Interactive control bundle and make it available to everyone on Mixer. If this is your first time publishing, you probably published version #[code 0.1.0] of your bundle. If you make updates, bug fixes, or improvements to it in the future, you can update the version number, found in the #[code package.json] file, and run #[code miix publish] again.
